{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clara\\\\Documents\\\\IFAL\\\\914\\\\mobile\\\\jogo-da-velha\\\\src\\\\JogoDaVelha.js\";\nimport React, { useState, useEffect } from 'react';\nimport './JogoDaVelha.css';\n\nfunction JogoDaVelha() {\n  const emptyBoard = Array(9).fill(\"\");\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [winner, setWinner] = useState(null);\n\n  const handleCellClick = index => {\n    if (winner) {\n      console.log(\"Jogo Finalizado\");\n      return null;\n    }\n\n    if (board[index] !== \"\") {\n      console.log(\"Posição ocupada\");\n      return null;\n    }\n\n    setBoard(board.map((item, itemIndex) => itemIndex === index ? currentPlayer : item));\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [[board[0], board[1], board[2]], [board[3], board[4], board[5]], [board[6], board[7], board[8]], [board[0], board[3], board[6]], [board[1], board[4], board[7]], [board[2], board[5], board[8]], [board[0], board[4], board[8]], [board[2], board[4], board[6]]];\n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"O\")) setWinner(\"O\");\n      if (cells.every(cell => cell === \"X\")) setWinner(\"X\");\n    });\n    checkDraw();\n  };\n\n  const checkDraw = () => {\n    if (board.every(item => item !== \"\")) {\n      //quando o jogo empata\n      setWinner(\"E\");\n    }\n  };\n\n  useEffect(checkWinner, [board]);\n\n  const resetGame = () => {\n    setCurrentPlayer(\"O\");\n    setBoard(emptyBoard);\n    setWinner(null);\n  };\n\n  return React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \" Jogo da velha \"), React.createElement(\"div\", {\n    className: 'board',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, board.map((item, index) => React.createElement(\"div\", {\n    key: index,\n    className: \"cell\" + [item],\n    onClick: () => handleCellClick(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, item))), React.createElement(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, winner && React.createElement(\"h2\", {\n    className: \"winner-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: winner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, winner), \" Ganhou!\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: resetGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Recome\\xE7ar Jogo!\")));\n}\n\nexport default JogoDaVelha;","map":{"version":3,"sources":["C:/Users/clara/Documents/IFAL/914/mobile/jogo-da-velha/src/JogoDaVelha.js"],"names":["React","useState","useEffect","JogoDaVelha","emptyBoard","Array","fill","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","handleCellClick","index","console","log","map","item","itemIndex","checkWinner","possibleWaysToWin","forEach","cells","every","cell","checkDraw","resetGame"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './JogoDaVelha.css';\n\nfunction JogoDaVelha() {\n  const emptyBoard = Array(9).fill(\"\");\n  const [board, setBoard] = useState(emptyBoard);\n\n  const [currentPlayer, setCurrentPlayer] = useState (\"O\");\n  const [winner, setWinner] = useState (null);\n  \n  const handleCellClick = (index) => {\n    if(winner){\n      console.log(\"Jogo Finalizado\");\n      return  null;\n    }\n\n    if(board[index] !== \"\"){\n      console.log(\"Posição ocupada\");\n      return  null;\n    }\n\n    setBoard(\n      board.map ((item, itemIndex) =>  itemIndex === index ? currentPlayer : item)\n      );\n    \n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\")\n  }\n  \n  const checkWinner = () => {\n    const possibleWaysToWin = [\n      [board[0],board[1], board[2]],\n      [board[3],board[4], board[5]],\n      [board[6],board[7], board[8]],\n      \n      [board[0],board[3], board[6]],\n      [board[1],board[4], board[7]],\n      [board[2],board[5], board[8]],\n      \n      [board[0],board[4], board[8]],\n      [board[2],board[4], board[6]]\n      ];\n  \n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"O\")) setWinner (\"O\")\n      if (cells.every(cell => cell === \"X\")) setWinner (\"X\")\n      });\n\n    checkDraw();\n  }\n\n  const checkDraw = () => {\n    if (board.every(item => item !== \"\")){\n      //quando o jogo empata\n      setWinner (\"E\");\n    }}\n\n\n  useEffect(checkWinner, [board]);\n  \n  const resetGame = () => {\n    setCurrentPlayer(\"O\");\n    setBoard(emptyBoard);\n    setWinner(null);\n  }\n\n  return (\n    <main>\n      <h1 className=\"title\"> Jogo da velha </h1>\n\n      <div className={'board'}>\n        {board.map((item, index) => (\n        <div\n          key={index}\n          className={ \"cell\"+[item] }\n          onClick={() => handleCellClick(index)}\n          >\n            {item}\n        </div>\n        ))}\n      </div>\n      \n      <footer>\n        {winner &&\n          <h2 className=\"winner-message\">\n            <span className={winner}>{winner}</span> Ganhou!\n          </h2>}\n          <br/>\n        <button onClick={resetGame}>Recomeçar Jogo!</button>\n      </footer>\n\n    </main>\n  );\n}\n\nexport default JogoDaVelha;\n"]},"metadata":{},"sourceType":"module"}